// Mocks generated by Mockito 5.4.0 from annotations
// in samoilenko_maps_app/test/features/search/bloc/github_search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:samoilenko_maps_app/features/search/models/github_user.dart'
    as _i3;
import 'package:samoilenko_maps_app/features/search/models/search_result.dart'
    as _i2;
import 'package:samoilenko_maps_app/features/search/models/search_result_item.dart'
    as _i4;
import 'package:samoilenko_maps_app/features/search/repositories/github_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchResult_0 extends _i1.SmartFake implements _i2.SearchResult {
  _FakeSearchResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGithubUser_1 extends _i1.SmartFake implements _i3.GithubUser {
  _FakeGithubUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$SearchResultItemCopyWith_2<$Res> extends _i1.SmartFake
    implements _i4.$SearchResultItemCopyWith<$Res> {
  _Fake$SearchResultItemCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepository extends _i1.Mock implements _i5.GithubRepository {
  MockGithubRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.SearchResult> search(String? term) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [term],
        ),
        returnValue: _i6.Future<_i2.SearchResult>.value(_FakeSearchResult_0(
          this,
          Invocation.method(
            #search,
            [term],
          ),
        )),
      ) as _i6.Future<_i2.SearchResult>);
}

/// A class which mocks [SearchResultItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchResultItem extends _i1.Mock implements _i4.SearchResultItem {
  MockSearchResultItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fullName => (super.noSuchMethod(
        Invocation.getter(#fullName),
        returnValue: '',
      ) as String);
  @override
  String get htmlUrl => (super.noSuchMethod(
        Invocation.getter(#htmlUrl),
        returnValue: '',
      ) as String);
  @override
  _i3.GithubUser get owner => (super.noSuchMethod(
        Invocation.getter(#owner),
        returnValue: _FakeGithubUser_1(
          this,
          Invocation.getter(#owner),
        ),
      ) as _i3.GithubUser);
  @override
  _i4.$SearchResultItemCopyWith<_i4.SearchResultItem> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$SearchResultItemCopyWith_2<_i4.SearchResultItem>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i4.$SearchResultItemCopyWith<_i4.SearchResultItem>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
