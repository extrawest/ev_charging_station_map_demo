import 'dart:async';import 'package:flutter/material.dart';import 'package:google_maps_cluster_manager/google_maps_cluster_manager.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:samoilenko_maps_app/features/stations/models/map_marker/map_marker.dart';import '../../../generated/assets.gen.dart';import '../models/station.dart';enum StatusVals { busy, available, offline, myLocation }List<CustomMapMarker> makeListOfCustomMapMarkers({required List<Station> stationsInfo}) {  final List<CustomMapMarker> places = [];  for (final i in stationsInfo) {    places.add(      CustomMapMarker(        latLng: LatLng(i.latitude!, i.longitude!),        name: i.stationId,        status: i.status,      ),    );  }  return places;}Future<Marker> Function(Cluster<CustomMapMarker>) get markerBuilder => (cluster) async {      return Marker(        markerId: MarkerId(cluster.getId()),        position: cluster.location,        onTap: () {},        icon: await _getMarkerBitmap(cluster.isMultiple ? 125 : 75, text: cluster.isMultiple ? cluster.count.toString() : null, pinAtts: cluster.items),      );    };Future<BitmapDescriptor> _getMarkerBitmap(  int size, {  String? text,  required Iterable<CustomMapMarker> pinAtts,}) async {  var img = Assets.images.pinGreen.path;  for (final i in pinAtts) {    if (i.myLocation != null) {      img = getProductStatusColor(StatusVals.myLocation);    } else {      img = getProductStatusColor(i.status);    }  }  return await BitmapDescriptor.fromAssetImage(const ImageConfiguration(devicePixelRatio: 3.2), img);}String getProductStatusColor(StatusVals? status) {  switch (status) {    case StatusVals.available:      return Assets.images.pinGreen.path;    case StatusVals.busy:      return Assets.images.pinYellow.path;    case StatusVals.offline:      return Assets.images.pinRed.path;    case StatusVals.myLocation:      return Assets.images.icMap.path;    case null:      return Assets.images.pinBlack.path;    default:      throw Exception('Wrong pin status');  }}