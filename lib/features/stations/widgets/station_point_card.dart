import 'package:flutter/material.dart';import '../../google_map/utils/cluster_utils.dart';import '../../theme/theme_info.dart';import '../models/map_marker/map_marker.dart';class StationPointCard extends StatelessWidget {  const StationPointCard({    super.key,    required this.fullWidth,    required this.items,    required this.currentContext,    required this.distanceInKilometers,  });  final double fullWidth;  final CustomMapMarker items;  final BuildContext currentContext;  final double? distanceInKilometers;  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),      child: Container(        width: fullWidth,        decoration: const BoxDecoration(          color: white,          borderRadius: BorderRadius.all(Radius.circular(8)),        ),        child: IntrinsicHeight(          child: Padding(            padding: const EdgeInsets.all(20),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                getStationStatusWidget(items.status),                const SizedBox(                  height: 5,                ),                Text('Station Name', style: Theme.of(currentContext).textTheme.headlineSmall),                const SizedBox(                  height: 5,                ),                Text('Address, Coordinates, Longitude, latitude here', style: Theme.of(currentContext).textTheme.labelMedium),                const SizedBox(                  height: 15,                ),                Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Row(                      children: [                        const Icon(Icons.location_on_outlined, color: greyLabelColor),                        const SizedBox(width: 2),                        if (distanceInKilometers != null)                          Text(                            '${distanceInKilometers?.toStringAsFixed(2)} km',                            style: Theme.of(currentContext).textTheme.labelMedium,                          ),                      ],                    ),                    Text(                      'Available connectors:  3/${items.connectors?.length}',                      style: Theme.of(currentContext).textTheme.labelMedium,                    ),                  ],                ),                const SizedBox(                  height: 15,                ),                SizedBox(                  height: 100,                  child: _buildConnectorsList(),                ),                ElevatedButton(                  onPressed: () {                    Navigator.of(context).pop();                  },                  child: const Text('Charge', style: TextStyle(color: white)),                ),              ],            ),          ),        ),      ),    );  }  ListView _buildConnectorsList() {    return ListView.builder(      itemBuilder: (BuildContext context, int index) {        return Padding(          padding: const EdgeInsets.only(right: 10),          child: Column(            children: [              Container(                decoration: BoxDecoration(                  borderRadius: const BorderRadius.all(Radius.circular(8)),                  border: Border.all(                    color: items.connectors![index].enabled ? greenAccent.withOpacity(0.2) : greyBorderColor,                    width: 2,                  ),                ),                child: Column(                  children: [                    Container(                      width: 102,                      color: items.connectors![index].enabled ? greenAccent.withOpacity(0.2) : greyBorderColor,                      child: Padding(                        padding: const EdgeInsets.all(8.0),                        child: Text(                          getConnectorStatusText(items.connectors?[index].type),                          style: Theme.of(currentContext).textTheme.labelSmall,                        ),                      ),                    ),                    Padding(                      padding: const EdgeInsets.all(8.0),                      child: SizedBox(                          width: 80,                          child: Row(                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                            children: [                              const Column(                                crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  Icon(                                    Icons.charging_station,                                    size: 24,                                    color: greenAccent,                                  ),                                ],                              ),                              Column(                                crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  Text(                                    '22Kw',                                    style: Theme.of(currentContext).textTheme.labelSmall!.copyWith(fontWeight: FontWeight.w200, fontSize: 10),                                  ),                                  Text(                                    '3.00\$',                                    style: Theme.of(currentContext).textTheme.labelSmall!.copyWith(fontWeight: FontWeight.bold, fontSize: 10),                                  ),                                ],                              ),                            ],                          ),),                    ),                  ],                ),              ),            ],          ),        );      },      scrollDirection: Axis.horizontal,      itemCount: items.connectors?.length,    );  }}