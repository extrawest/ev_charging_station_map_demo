import 'dart:async';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:geolocator/geolocator.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:samoilenko_maps_app/features/stations/bloc/stations_bloc/stations_cubit_state.dart';import '../../../../common/services/location_service.dart';import '../../../../common/services/logger.dart';import '../../repositories/stations_repository.dart';class StationsCubit extends Cubit<StationsCubitState> {  final StationsRepository stationsRepository;  StationsCubit({    required this.stationsRepository,  }) : super(          const StationsCubitState.initial(),        );  Future<void> fetchStations() async {    emit(const StationsCubitState.loading());    try {      final stations = await stationsRepository.fetchStations();      final GeolocationService geoService = GeolocationService();      final bool hasGeolocation = await geoService.hasGeoLocation();      await geoService.loadCurrentLocation();      if (geoService.currentLocation == null || !hasGeolocation) {        try {          await geoService.checkAndRequestLocationAccess();          await geoService.loadCurrentLocation();        } catch (e) {          log.fine('Permission Denied $e');        }      } else {        try {          await geoService.loadCurrentLocation();        } catch (e) {          log.fine('Permission Denied $e');        }      }      final myLocation  = geoService.currentLocation;      final permissionStatus = geoService.permissionGranted;      if(permissionStatus == LocationPermission.deniedForever){        emit(const StationsCubitState.permissionDenied());      }      emit(        StationsCubitState.loaded(          stationsInfo: stations,          myLocation: myLocation != null ? LatLng(myLocation.x, myLocation.y) : null,        ),      );    } catch (e) {      emit(StationsCubitState.error(message: e.toString()));    }  }}